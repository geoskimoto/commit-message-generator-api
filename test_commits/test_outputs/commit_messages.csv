test_name,test_type,diff,commit_message
"comments_1","comments","--- ./comments/comments_original1.py	2025-04-20 20:21:39 +++ ./comments/comments_changed1.py	2025-04-20 20:21:39 @@ -1;2 +1;3 @@  def greet(name): +    # Return a greeting message      return f""Hello; {name}!"" ","comments/comments_original1.py: ""Removed unnecessary print statements"""
"comments_2","comments","--- ./comments/comments_original2.py	2025-04-20 20:21:39 +++ ./comments/comments_changed2.py	2025-04-20 20:21:39 @@ -1;4 +1;6 @@  def factorial(n): +    # Base case: factorial of 0 is 1      if n == 0:          return 1 +    # Recursive case: n * factorial of (n - 1)      return n * factorial(n - 1) ","comments/comments_original2.py: """
"comments_3","comments","--- ./comments/comments_original3.py	2025-04-20 20:21:39 +++ ./comments/comments_changed3.py	2025-04-20 20:21:39 @@ -1;4 +1;7 @@  def process_data(data): +    # Normalize the data by dividing each element by the maximum value      normalized = [x / max(data) for x in data] +    # Filter values greater than 0.5      filtered = [x for x in normalized if x > 0.5] +    # Return the average of the filtered values      return sum(filtered) / len(filtered) ","comments/comments_original3.py: ""Normalize data and filter values greater than 0.5"""
"comments_4","comments","--- ./comments/comments_original4.py	2025-04-20 20:21:39 +++ ./comments/comments_changed4.py	2025-04-20 20:21:39 @@ -1;17 +1;25 @@  import random   +# Generate a list of 20 random integers between 50 and 100  def gen():      return [random.randint(50; 100) for _ in range(20)]   +# Calculate the average of the data  def proc(data):      return sum(data) / len(data)   +# Find the highest value in the dataset  def high(data):      return sorted(data)[-1]   +# Find the lowest value in the dataset  def low(data):      return sorted(data)[0]   +# Group the data into three categories: +# 'X' for scores 85 and above; +# 'Y' for scores between 70 and 84; +# 'Z' for scores below 70  def group(data):      buckets = {'X': 0; 'Y': 0; 'Z': 0}      for val in data: @@ -23;15 +31;17 @@              buckets['Z'] += 1      return buckets   +# Print summary statistics and category distribution  def out(data): -    print(f""p: {proc(data):.1f}"") -    print(f""h: {high(data)}"") -    print(f""l: {low(data)}"") +    print(f""p: {proc(data):.1f}"")       # average +    print(f""h: {high(data)}"")           # highest +    print(f""l: {low(data)}"")            # lowest      g = group(data) -    print(""g:"") +    print(""g:"")                         # group counts      for k; v in g.items():          print(f"" {k}: {v}"")   +# Main function to generate data and show output  def go():      d = gen()      out(d) ","comments/comments_original4.py: [ADDED] # Generate a list of 20 random integers between 50 and 100"
"bug_fix_1","java","--- ./java/bug_fix_original1.java	2025-04-20 20:21:39 +++ ./java/bug_fix_changed1.java	2025-04-20 20:21:39 @@ -1;5 +1;8 @@  public class MathUtils {      public static int divide(int a; int b) { +        if (b == 0) { +            throw new IllegalArgumentException(""Cannot divide by zero""); +        }          return a / b;      }  } ","java/bug_fix_original1.java: ""Added exception handling for division by zero"""
"bug_fix_2","java","--- ./java/bug_fix_original2.java	2025-04-20 20:21:39 +++ ./java/bug_fix_changed2.java	2025-04-20 20:21:39 @@ -1;9 +1;10 @@  public class MathUtils {      public static double average(int[] nums) { +        if (nums.length == 0) return 0;          int sum = 0;          for (int n : nums) {              sum += n;          } -        return sum / nums.length; +        return (double) sum / nums.length;      }  } ","java/bug_fix_original2.java: ""Removed unnecessary conversion to double"""
"bug_fix_3","java","--- ./java/bug_fix_original3.java	2025-04-20 20:21:39 +++ ./java/bug_fix_changed3.java	2025-04-20 20:21:39 @@ -1;5 +1;8 @@  public class Calculator {      public int divide(int a; int b) { +        if (b == 0) { +            throw new IllegalArgumentException(""Division by zero""); +        }          return a / b;      }  } ","java/bug_fix_original3.java: ""Added exception handling for division by zero"""
"doc_update_1","java","--- ./java/doc_update_original1.java	2025-04-20 20:21:39 +++ ./java/doc_update_changed1.java	2025-04-20 20:21:39 @@ -1;4 +1;10 @@  public class Utils { +    /** +     * Greet the user by name. +     *  +     * @param name The name of the user. +     * @return A greeting message. +     */      public static String greet(String name) {          return ""Hello; "" + name + ""!"";      } ","java/doc_update_original1.java: ""Added greeting function"""
"doc_update_2","java","--- ./java/doc_update_original2.java	2025-04-20 20:21:39 +++ ./java/doc_update_changed2.java	2025-04-20 20:21:39 @@ -1;4 +1;10 @@  public class Geometry { +    /** +     * Calculate the area of a circle. +     *  +     * @param radius The radius of the circle. +     * @return The area of the circle. +     */      public static double area(double radius) {          return Math.PI * radius * radius;      } ","java/doc_update_original2.java: Added function to calculate the area of a circle."
"doc_update_3","java","--- ./java/doc_update_original3.java	2025-04-20 20:21:39 +++ ./java/doc_update_changed3.java	2025-04-20 20:21:39 @@ -1;4 +1;14 @@ +/** + * A simple email service for sending text-based emails. + */  public class EmailService { + +    /** +     * Sends an email to the given recipient. +     * @param to The recipient's email address +     * @param subject The subject line of the email +     * @param body The body of the email +     */      public void send(String to; String subject; String body) {          System.out.println(""Sending email..."");      } ","java/doc_update_original3.java: Added a simple email service"
"feature_addition_1","java","--- ./java/feature_addition_original1.java	2025-04-20 20:21:39 +++ ./java/feature_addition_changed1.java	2025-04-20 20:21:39 @@ -2;4 +2;8 @@      public static String greet(String name) {          return ""Hello; "" + name + ""!"";      } + +    public static String farewell(String name) { +        return ""Goodbye; "" + name + ""!""; +    }  } ","java/feature_addition_original1.java: ""Added farewell method"""
"feature_addition_2","java","--- ./java/feature_addition_original2.java	2025-04-20 20:21:39 +++ ./java/feature_addition_changed2.java	2025-04-20 20:21:39 @@ -10;4 +10;8 @@      public String getFullName() {          return firstName + "" "" + lastName;      } + +    public String getInitials() { +        return firstName.charAt(0) + ""."" + lastName.charAt(0) + "".""; +    }  } ","java/feature_addition_original2.java: Added method to get user initials"
"feature_addition_3","java","--- ./java/feature_addition_original3.java	2025-04-20 20:21:39 +++ ./java/feature_addition_changed3.java	2025-04-20 20:21:39 @@ -1;7 +1;17 @@ +import java.time.LocalDateTime; +  public class Notification {      private String message; +    private LocalDateTime timestamp; +    private boolean read;        public Notification(String message) {          this.message = message; +        this.timestamp = LocalDateTime.now(); +        this.read = false;      } + +    public void markAsRead() { +        this.read = true; +    }  } ","java/feature_addition_original3.java: ""Added timestamp and read flag to the class"""
"refactor_1","java","--- ./java/refactor_original1.java	2025-04-20 20:21:39 +++ ./java/refactor_changed1.java	2025-04-20 20:21:39 @@ -1;9 +1;5 @@  public class NumberUtils {      public static boolean isEven(int num) { -        if (num % 2 == 0) { -            return true; -        } else { -            return false; -        } +        return num % 2 == 0;      }  } ","java/refactor_original1.java: ""Removed unnecessary return statements and added return statement for clarity"""
"refactor_2","java","--- ./java/refactor_original2.java	2025-04-20 20:21:39 +++ ./java/refactor_changed2.java	2025-04-20 20:21:39 @@ -1;11 +1;12 @@ +import java.util.Map; +  public class RoleChecker { +    private static final Map<String; String> roleMap = Map.of( +        ""admin""; ""Administrator""; +        ""user""; ""User"" +    ); +      public static String getRole(String role) { -        if (role.equals(""admin"")) { -            return ""Administrator""; -        } else if (role.equals(""user"")) { -            return ""User""; -        } else { -            return ""Unknown""; -        } +        return roleMap.getOrDefault(role; ""Unknown"");      }  } ","java/refactor_original2.java: ""Added role mapping to map"""
"refactor_3","java","--- ./java/refactor_original3.java	2025-04-20 20:21:39 +++ ./java/refactor_changed3.java	2025-04-20 20:21:39 @@ -1;8 +1;9 @@  public class AuthService { +    private boolean isAdmin(String username; String password) { +        return username.equals(""admin"") && password.equals(""1234""); +    } +      public boolean authenticate(String username; String password) { -        if (username.equals(""admin"") && password.equals(""1234"")) { -            return true; -        } -        return false; +        return isAdmin(username; password);      }  } ","java/refactor_original3.java: ""Added isAdmin function and removed unnecessary if statement"""
"bug_fix_1","javascript","--- ./javascript/bug_fix_original1.js	2025-04-20 20:21:39 +++ ./javascript/bug_fix_changed1.js	2025-04-20 20:21:39 @@ -1;4 +1;7 @@  function divide(a; b) { +    if (b === 0) { +      throw new Error(""Cannot divide by zero""); +    }      return a / b;    }     \ No newline at end of file ","javascript/bug_fix_original1.js: ""Added error handling for division by zero"""
"bug_fix_2","javascript","--- ./javascript/bug_fix_original2.js	2025-04-20 20:21:39 +++ ./javascript/bug_fix_changed2.js	2025-04-20 20:21:39 @@ -1;3 +1;3 @@  function calculateTotal(cart) { -  return cart.reduce((total; item) => total + item.price); +  return cart.reduce((total; item) => total + (item.price || 0); 0);  } ","javascript/bug_fix_original2.js: ""Remove price calculation from cart reduce function and add a default value to it"""
"bug_fix_3","javascript","--- ./javascript/bug_fix_original3.js	2025-04-20 20:21:39 +++ ./javascript/bug_fix_changed3.js	2025-04-20 20:21:39 @@ -1;4 +1;12 @@  async function fetchUserData(userId) { -  const response = await fetch(`/api/user/${userId}`); -  return response.json(); +  try { +      const response = await fetch(`/api/user/${userId}`); +      if (!response.ok) { +          throw new Error(""Network response was not ok""); +      } +      return await response.json(); +  } catch (error) { +      console.error(""Failed to fetch user data:""; error); +      return null; +  }  } ","javascript/bug_fix_original3.js: ""Removed unnecessary fetch and replaced with try-catch for error handling"""
"doc_update_1","javascript","--- ./javascript/doc_update_original1.js	2025-04-20 20:21:39 +++ ./javascript/doc_update_changed1.js	2025-04-20 20:21:39 @@ -1;3 +1;8 @@ +/** + * Greet the user by name. + * @param {string} name - The name of the user + * @returns {string} A greeting message + */  function greet(name) {      return `Hello; ${name}!`;    } \ No newline at end of file ","javascript/doc_update_original1.js: Added greeting function"
"doc_update_2","javascript","--- ./javascript/doc_update_original2.js	2025-04-20 20:21:39 +++ ./javascript/doc_update_changed2.js	2025-04-20 20:21:39 @@ -1;3 +1;9 @@ +/** + * Calculate the area of a circle. + *  + * @param {number} radius - The radius of the circle. + * @returns {number} The area. + */  function calculateArea(radius) {    return Math.PI * radius * radius;  } ","javascript/doc_update_original2.js: Added function to calculate the area of a circle."
"doc_update_3","javascript","--- ./javascript/doc_update_original3.js	2025-04-20 20:21:39 +++ ./javascript/doc_update_changed3.js	2025-04-20 20:21:39 @@ -1;3 +1;9 @@ +/** + * Encrypts a string using a basic Caesar cipher-like algorithm. + * @param {string} text - The text to encrypt. + * @param {number} key - The key (shift) for the encryption. + * @returns {string} The encrypted string. + */  function encrypt(text; key) {    return text.split('').map(char => String.fromCharCode(char.charCodeAt(0) + key)).join('');  } ","javascript/doc_update_original3.js: Added encryption function"
"feature_addition_1","javascript","--- ./javascript/feature_addition_original1.js	2025-04-20 20:21:39 +++ ./javascript/feature_addition_changed1.js	2025-04-20 20:21:39 @@ -1;3 +1;8 @@  function greet(name) { -  return `Hello; ${name}!`; -} +    return `Hello; ${name}!`; +  } +   +  function farewell(name) { +    return `Goodbye; ${name}!`; +  } +   ","javascript/feature_addition_original1.js: ""Added farewell function and removed return statement"""
"feature_addition_2","javascript","--- ./javascript/feature_addition_original2.js	2025-04-20 20:21:39 +++ ./javascript/feature_addition_changed2.js	2025-04-20 20:21:39 @@ -1;3 +1;7 @@  function getUserFullName(user) {    return `${user.firstName} ${user.lastName}`;  } + +function getUserInitials(user) { +  return `${user.firstName[0]}.${user.lastName[0]}.`; +} ","javascript/feature_addition_original2.js: Added function to get user initials"
"feature_addition_3","javascript","--- ./javascript/feature_addition_original3.js	2025-04-20 20:21:39 +++ ./javascript/feature_addition_changed3.js	2025-04-20 20:21:39 @@ -2;5 +2;11 @@    constructor(name) {        this.name = name;        this.completed = false; +      this.createdAt = new Date();    } + +  markComplete() { +      this.completed = true; +      this.completedAt = new Date(); +  }  } ","javascript/feature_addition_original3.js: ""Added createdAt and markComplete methods"""
"refactor_1","javascript","--- ./javascript/refactor_original1.js	2025-04-20 20:21:39 +++ ./javascript/refactor_changed1.js	2025-04-20 20:21:39 @@ -1;8 +1;4 @@  function isEven(num) { -    if (num % 2 === 0) { -      return true; -    } else { -      return false; -    } +    return num % 2 === 0;    }     \ No newline at end of file ","javascript/refactor_original1.js: ""Removed unnecessary conditional check and added return statement"""
"refactor_2","javascript","--- ./javascript/refactor_original2.js	2025-04-20 20:21:39 +++ ./javascript/refactor_changed2.js	2025-04-20 20:21:39 @@ -1;9 +1;8 @@ +const roleMap = { +  admin: 'Administrator'; +  user: 'Regular User' +}; +  function getUserRole(user) { -  if (user.role === 'admin') { -      return 'Administrator'; -  } else if (user.role === 'user') { -      return 'Regular User'; -  } else { -      return 'Unknown'; -  } +  return roleMap[user.role] || 'Unknown';  } ","javascript/refactor_original2.js: ""Added role mapping"""
"refactor_3","javascript","--- ./javascript/refactor_original3.js	2025-04-20 20:21:39 +++ ./javascript/refactor_changed3.js	2025-04-20 20:21:39 @@ -1;9 +1;21 @@ +function handlePendingOrder(order) { +  console.log(""Processing order...""); +  // do stuff +} + +function handleShippedOrder() { +  console.log(""Already shipped.""); +} +  function processOrder(order) { -  if (order.status === 'pending') { -      console.log(""Processing order...""); -      // do stuff +  switch(order.status) { +      case 'pending': +          handlePendingOrder(order); +          break; +      case 'shipped': +          handleShippedOrder(); +          break; +      default: +          console.log(""Unknown status."");    } -  if (order.status === 'shipped') { -      console.log(""Already shipped.""); -  }  } ","javascript/refactor_original3.js: ""Removed unnecessary console.log statements and added new ones for better logging"""
"bug_fix_1","python","--- ./python/bug_fix_original1.py	2025-04-20 20:21:39 +++ ./python/bug_fix_changed1.py	2025-04-20 20:21:39 @@ -1;2 +1;4 @@ -def divide(a; b): -    return a / b +def average(numbers): +    if not numbers: +        return 0 +    return sum(numbers) / len(numbers) ","python/bug_fix_original1.py: ""Removed divide function and added average function"""
"bug_fix_2","python","--- ./python/bug_fix_original2.py	2025-04-20 20:21:39 +++ ./python/bug_fix_changed2.py	2025-04-20 20:21:39 @@ -1;2 +1;4 @@ -def average(numbers): -    return sum(numbers) / len(numbers) +def divide(a; b): +    if b == 0: +        raise ValueError(""Cannot divide by zero"") +    return a / b ","python/bug_fix_original2.py: ""Removed unnecessary function and added new function for division"""
"bug_fix_3","python","--- ./python/bug_fix_original3.py	2025-04-20 20:21:39 +++ ./python/bug_fix_changed3.py	2025-04-20 20:21:39 @@ -1;5 +1;10 @@  import requests    def get_weather(city): -    response = requests.get(f""http://api.weather.com/{city}"") -    return response.json() +    try: +        response = requests.get(f""http://api.weather.com/{city}"") +        response.raise_for_status() +        return response.json() +    except requests.RequestException as e: +        print(f""Error fetching weather data: {e}"") +        return None ","python/bug_fix_original3.py: Remove unnecessary requests.get() and replace with try-except block for error handling"
"doc_update_1","python","--- ./python/doc_update_original1.py	2025-04-20 20:21:39 +++ ./python/doc_update_changed1.py	2025-04-20 20:21:39 @@ -1;2 +1;11 @@  def greet(name): +    """""" +    Greet the user by name. + +    Parameters: +    name (str): The name of the user. + +    Returns: +    str: A greeting message. +    """"""      return f""Hello; {name}!"" ","python/doc_update_original1.py: ""Add greeting feature"""
"doc_update_2","python","--- ./python/doc_update_original2.py	2025-04-20 20:21:39 +++ ./python/doc_update_changed2.py	2025-04-20 20:21:39 @@ -1;2 +1;11 @@  def calculate_area(radius): +    """""" +    Calculate the area of a circle. + +    Parameters: +    radius (float): The radius of the circle. + +    Returns: +    float: The area of the circle. +    """"""      return 3.14159 * radius * radius ","python/doc_update_original2.py: ""Added function to calculate the area of a circle"""
"doc_update_3","python","--- ./python/doc_update_original3.py	2025-04-20 20:21:39 +++ ./python/doc_update_changed3.py	2025-04-20 20:21:39 @@ -1;2 +1;10 @@  def send_email(recipient; subject; body): +    """""" +    Sends a formatted email message. + +    Parameters: +        recipient (str): The recipient's email address. +        subject (str): The email subject line. +        body (str): The body content of the email. +    """"""      print(f""Sending email to {recipient} with subject {subject}"") ","python/doc_update_original3.py: ""Added email functionality"""
"feature_addition_1","python","--- ./python/feature_addition_original1.py	2025-04-20 20:21:39 +++ ./python/feature_addition_changed1.py	2025-04-20 20:21:39 @@ -1;2 +1;5 @@  def greet(name):      return f""Hello; {name}!"" + +def farewell(name): +    return f""Goodbye; {name}!"" ","python/feature_addition_original1.py: ""Added farewell function"""
"feature_addition_2","python","--- ./python/feature_addition_original2.py	2025-04-20 20:21:39 +++ ./python/feature_addition_changed2.py	2025-04-20 20:21:39 @@ -5;3 +5;6 @@        def full_name(self):          return f""{self.first} {self.last}"" +     +    def initials(self): +        return f""{self.first[0]}.{self.last[0]}."" ","python/feature_addition_original2.py: ""Added function to get initials"""
"feature_addition_3","python","--- ./python/feature_addition_original3.py	2025-04-20 20:21:39 +++ ./python/feature_addition_changed3.py	2025-04-20 20:21:39 @@ -1;4 +1;11 @@ +from datetime import datetime +  class Session:      def __init__(self; user_id):          self.user_id = user_id          self.active = True +        self.created_at = datetime.utcnow() + +    def end(self): +        self.active = False +        self.ended_at = datetime.utcnow() ","python/feature_addition_original3.py: ""Added end() and end_at attributes and methods"""
"refactor_1","python","--- ./python/refactor_original1.py	2025-04-20 20:21:39 +++ ./python/refactor_changed1.py	2025-04-20 20:21:39 @@ -1;5 +1;2 @@  def is_even(num): -    if num % 2 == 0: -        return True -    else: -        return False +    return num % 2 == 0 ","python/refactor_original1.py: ""Removed unnecessary conditional check and added return statement for better readability"""
"refactor_2","python","--- ./python/refactor_original2.py	2025-04-20 20:21:39 +++ ./python/refactor_changed2.py	2025-04-20 20:21:39 @@ -1;7 +1;5 @@  def get_role(role): -    if role == 'admin': -        return 'Administrator' -    elif role == 'user': -        return 'User' -    else: -        return 'Unknown' +    return { +        'admin': 'Administrator'; +        'user': 'User' +    }.get(role; 'Unknown') ","python/refactor_original2.py: [REMOVED] Removed role-based access control, [ADDED] Added role-based access control"
"refactor_3","python","--- ./python/refactor_original3.py	2025-04-20 20:21:39 +++ ./python/refactor_changed3.py	2025-04-20 20:21:39 @@ -1;4 +1;10 @@ -def report_user_activity(user): +def log_login(user):      print(f""{user.name} logged in at {user.login_time}"") + +def check_failed_attempts(user):      if user.failed_attempts > 3:          print(""User had multiple failed login attempts"") + +def report_user_activity(user): +    log_login(user) +    check_failed_attempts(user) ","python/refactor_original3.py: ""Added login and failed attempts tracking functions"""
