test_name,test_type,diff,commit_message
"bug_fix_1","java","--- ./java/bug_fix_original1.java	2025-04-20 20:21:39 +++ ./java/bug_fix_changed1.java	2025-04-20 20:21:39 @@ -1;5 +1;8 @@  public class MathUtils {      public static int divide(int a; int b) { +        if (b == 0) { +            throw new IllegalArgumentException(""Cannot divide by zero""); +        }          return a / b;      }  } ","java/bug_fix_original1.java: ""Added exception handling for division by zero"""
"bug_fix_2","java","--- ./java/bug_fix_original2.java	2025-04-20 20:21:39 +++ ./java/bug_fix_changed2.java	2025-04-20 20:21:39 @@ -1;9 +1;10 @@  public class MathUtils {      public static double average(int[] nums) { +        if (nums.length == 0) return 0;          int sum = 0;          for (int n : nums) {              sum += n;          } -        return sum / nums.length; +        return (double) sum / nums.length;      }  } ","java/bug_fix_original2.java: ""Removed unnecessary conversion to double"""
"bug_fix_3","java","--- ./java/bug_fix_original3.java	2025-04-20 20:21:39 +++ ./java/bug_fix_changed3.java	2025-04-20 20:21:39 @@ -1;5 +1;8 @@  public class Calculator {      public int divide(int a; int b) { +        if (b == 0) { +            throw new IllegalArgumentException(""Division by zero""); +        }          return a / b;      }  } ","java/bug_fix_original3.java: ""Added exception handling for division by zero"""
"bug_fix_4","java","--- ./java/bug_fix_original4.java	2025-04-21 23:10:27 +++ ./java/bug_fix_changed4.java	2025-04-21 23:10:27 @@ -1;10 +1;10 @@  import java.util.ArrayList;  import java.util.List;   -public class UserManagerOriginal { +public class UserManagerFixed {      private List<User> users;   -    public UserManagerOriginal() { +    public UserManagerFixed() {          this.users = new ArrayList<>();      }   @@ -14;11 +14;25 @@        public String getUserFullName(int index) {          User user = users.get(index); + +        if ((user.firstName == null || user.firstName.isEmpty()) && +            (user.lastName == null || user.lastName.isEmpty())) { +            throw new IllegalArgumentException(""User name information is missing""); +        } + +        if (user.firstName == null || user.firstName.isEmpty()) { +            return user.lastName; +        } + +        if (user.lastName == null || user.lastName.isEmpty()) { +            return user.firstName; +        } +          return user.firstName + "" "" + user.lastName;      }        public static void main(String[] args) { -        UserManagerOriginal manager = new UserManagerOriginal(); +        UserManagerFixed manager = new UserManagerFixed();          manager.addUser(""Alice""; ""Johnson"");          manager.addUser(""Bob""; null);   ","java/bug_fix_original4.java: ""Fixed UserManager class: added validation for missing user name information"""
"bug_fix_5","java","--- ./java/bug_fix_original5.java	2025-04-21 23:10:27 +++ ./java/bug_fix_changed5.java	2025-04-21 23:10:27 @@ -1;13 +1;19 @@  import java.util.Arrays;   -public class StatsCalculatorOriginal { +public class StatsCalculatorChanged {      private double[] numbers;   -    public StatsCalculatorOriginal(double[] numbers) { +    public StatsCalculatorChanged(double[] numbers) { +        if (numbers == null) { +            throw new IllegalArgumentException(""Input must not be null""); +        }          this.numbers = numbers;      }        public double getAverage() { +        if (numbers.length == 0) { +            throw new IllegalArgumentException(""Cannot calculate average of an empty array""); +        }          double sum = 0;          for (double num : numbers) {              sum += num; @@ -16;6 +22;9 @@      }        public double getMedian() { +        if (numbers.length == 0) { +            throw new IllegalArgumentException(""Cannot calculate median of an empty array""); +        }          double[] sorted = Arrays.copyOf(numbers; numbers.length);          Arrays.sort(sorted);          int mid = sorted.length / 2; @@ -27;13 +36;21 @@        public static void main(String[] args) {          double[] data1 = {10; 20; 30; 40}; -        StatsCalculatorOriginal stats1 = new StatsCalculatorOriginal(data1); +        StatsCalculatorChanged stats1 = new StatsCalculatorChanged(data1);          System.out.println(stats1.getAverage());          System.out.println(stats1.getMedian());            double[] data2 = {}; -        StatsCalculatorOriginal stats2 = new StatsCalculatorOriginal(data2); -        System.out.println(stats2.getAverage()); // Will cause divide by zero -        System.out.println(stats2.getMedian());  // Will cause index error +        StatsCalculatorChanged stats2 = new StatsCalculatorChanged(data2); +        try { +            System.out.println(stats2.getAverage()); +        } catch (Exception e) { +            System.out.println(e.getMessage()); +        } +        try { +            System.out.println(stats2.getMedian()); +        } catch (Exception e) { +            System.out.println(e.getMessage()); +        }      }  } ","java/bug_fix_original5.java: [REMOVED] Removed unnecessary StatsCalculatorOriginal constructor and methods"
"doc_update_1","java","--- ./java/doc_update_original1.java	2025-04-20 20:21:39 +++ ./java/doc_update_changed1.java	2025-04-20 20:21:39 @@ -1;4 +1;10 @@  public class Utils { +    /** +     * Greet the user by name. +     *  +     * @param name The name of the user. +     * @return A greeting message. +     */      public static String greet(String name) {          return ""Hello; "" + name + ""!"";      } ","java/doc_update_original1.java: ""Added greeting function"""
"doc_update_2","java","--- ./java/doc_update_original2.java	2025-04-20 20:21:39 +++ ./java/doc_update_changed2.java	2025-04-20 20:21:39 @@ -1;4 +1;10 @@  public class Geometry { +    /** +     * Calculate the area of a circle. +     *  +     * @param radius The radius of the circle. +     * @return The area of the circle. +     */      public static double area(double radius) {          return Math.PI * radius * radius;      } ","java/doc_update_original2.java: Added function to calculate the area of a circle."
"doc_update_3","java","--- ./java/doc_update_original3.java	2025-04-20 20:21:39 +++ ./java/doc_update_changed3.java	2025-04-20 20:21:39 @@ -1;4 +1;14 @@ +/** + * A simple email service for sending text-based emails. + */  public class EmailService { + +    /** +     * Sends an email to the given recipient. +     * @param to The recipient's email address +     * @param subject The subject line of the email +     * @param body The body of the email +     */      public void send(String to; String subject; String body) {          System.out.println(""Sending email..."");      } ","java/doc_update_original3.java: Added a simple email service"
"feature_addition_1","java","--- ./java/feature_addition_original1.java	2025-04-20 20:21:39 +++ ./java/feature_addition_changed1.java	2025-04-20 20:21:39 @@ -2;4 +2;8 @@      public static String greet(String name) {          return ""Hello; "" + name + ""!"";      } + +    public static String farewell(String name) { +        return ""Goodbye; "" + name + ""!""; +    }  } ","java/feature_addition_original1.java: ""Added farewell method"""
"feature_addition_2","java","--- ./java/feature_addition_original2.java	2025-04-20 20:21:39 +++ ./java/feature_addition_changed2.java	2025-04-20 20:21:39 @@ -10;4 +10;8 @@      public String getFullName() {          return firstName + "" "" + lastName;      } + +    public String getInitials() { +        return firstName.charAt(0) + ""."" + lastName.charAt(0) + "".""; +    }  } ","java/feature_addition_original2.java: Added method to get user initials"
"feature_addition_3","java","--- ./java/feature_addition_original3.java	2025-04-20 20:21:39 +++ ./java/feature_addition_changed3.java	2025-04-20 20:21:39 @@ -1;7 +1;17 @@ +import java.time.LocalDateTime; +  public class Notification {      private String message; +    private LocalDateTime timestamp; +    private boolean read;        public Notification(String message) {          this.message = message; +        this.timestamp = LocalDateTime.now(); +        this.read = false;      } + +    public void markAsRead() { +        this.read = true; +    }  } ","java/feature_addition_original3.java: ""Added timestamp and read flag to the class"""
"feature_addition_4","java","--- ./java/feature_addition_original4.java	2025-04-21 23:10:27 +++ ./java/feature_addition_changed4.java	2025-04-21 23:10:27 @@ -1;15 +1;27 @@  import java.util.ArrayList; +import java.util.Date;  import java.util.List;    class Task {      private String name;      private boolean completed; +    private Date createdAt; +    private Date completedAt; +    private String priority;   -    public Task(String name) { +    public Task(String name; String priority) {          this.name = name;          this.completed = false; +        this.createdAt = new Date(); +        this.priority = priority; +        this.completedAt = null;      }   +    public void markComplete() { +        this.completed = true; +        this.completedAt = new Date(); +    } +      public String getName() {          return name;      } @@ -17;16 +29;40 @@      public boolean isCompleted() {          return completed;      } + +    public String getPriority() { +        return priority; +    }  }    class TaskManager {      private List<Task> tasks = new ArrayList<>();   -    public void addTask(String name) { -        tasks.add(new Task(name)); +    public void addTask(String name; String priority) { +        tasks.add(new Task(name; priority));      }        public List<Task> getAllTasks() {          return tasks;      } + +    public List<Task> getCompletedTasks() { +        List<Task> result = new ArrayList<>(); +        for (Task task : tasks) { +            if (task.isCompleted()) { +                result.add(task); +            } +        } +        return result; +    } + +    public List<Task> getTasksByPriority(String priority) { +        List<Task> result = new ArrayList<>(); +        for (Task task : tasks) { +            if (task.getPriority().equals(priority)) { +                result.add(task); +            } +        } +        return result; +    }  } ","java/feature_addition_original4.java: [ADDED] ""Added new fields to Task class"""
"refactor_1","java","--- ./java/refactor_original1.java	2025-04-20 20:21:39 +++ ./java/refactor_changed1.java	2025-04-20 20:21:39 @@ -1;9 +1;5 @@  public class NumberUtils {      public static boolean isEven(int num) { -        if (num % 2 == 0) { -            return true; -        } else { -            return false; -        } +        return num % 2 == 0;      }  } ","java/refactor_original1.java: ""Removed unnecessary return statements and added return statement for clarity"""
"refactor_2","java","--- ./java/refactor_original2.java	2025-04-20 20:21:39 +++ ./java/refactor_changed2.java	2025-04-20 20:21:39 @@ -1;11 +1;12 @@ +import java.util.Map; +  public class RoleChecker { +    private static final Map<String; String> roleMap = Map.of( +        ""admin""; ""Administrator""; +        ""user""; ""User"" +    ); +      public static String getRole(String role) { -        if (role.equals(""admin"")) { -            return ""Administrator""; -        } else if (role.equals(""user"")) { -            return ""User""; -        } else { -            return ""Unknown""; -        } +        return roleMap.getOrDefault(role; ""Unknown"");      }  } ","java/refactor_original2.java: ""Added role mapping to map"""
"refactor_3","java","--- ./java/refactor_original3.java	2025-04-20 20:21:39 +++ ./java/refactor_changed3.java	2025-04-20 20:21:39 @@ -1;8 +1;9 @@  public class AuthService { +    private boolean isAdmin(String username; String password) { +        return username.equals(""admin"") && password.equals(""1234""); +    } +      public boolean authenticate(String username; String password) { -        if (username.equals(""admin"") && password.equals(""1234"")) { -            return true; -        } -        return false; +        return isAdmin(username; password);      }  } ","java/refactor_original3.java: ""Added isAdmin function and removed unnecessary if statement"""
"refactor_4","java","--- ./java/refactor_original4.java	2025-04-21 23:10:27 +++ ./java/refactor_changed4.java	2025-04-21 23:10:27 @@ -3;19 +3;32 @@    public class UserActivity {   -    public static void reportUserActivity(User user) { +    public static void logLoginTime(User user) {          System.out.println(user.getName() + "" logged in at "" + user.getLoginTime()); +    }   +    public static void logSessionDuration(User user) {          Duration sessionLength = Duration.between(user.getLoginTime(); user.getLogoutTime());          System.out.println(""Session duration: "" + sessionLength.getSeconds() + "" seconds""); +    }   +    public static void warnFailedAttempts(User user) {          if (user.getFailedAttempts() > 3) {              System.out.println(""User had multiple failed login attempts"");          } +    }   +    public static void warnPasswordExpiry(User user) {          Duration passwordAge = Duration.between(user.getPasswordLastChanged(); user.getLoginTime());          if (passwordAge.toDays() > 90) {              System.out.println(""User password may be expired"");          }      } + +    public static void reportUserActivity(User user) { +        logLoginTime(user); +        logSessionDuration(user); +        warnFailedAttempts(user); +        warnPasswordExpiry(user); +    }  } ","java/refactor_original4.java: ""Added new methods to log login time, session duration, warn failed attempts, and warn password expiry for user activity report"""
"refactor_5","java","--- ./java/refactor_original5.java	2025-04-21 23:10:27 +++ ./java/refactor_changed5.java	2025-04-21 23:10:27 @@ -3;22 +3;42 @@    public class AuthService {   -    public static String handleLogin(User user; String password; Map<String; Integer> loginAttempts; String secret) { -        if (!user.getPassword().equals(password)) { -            loginAttempts.put(user.getUsername(); loginAttempts.getOrDefault(user.getUsername(); 0) + 1); -            if (loginAttempts.get(user.getUsername()) > 5) { -                System.out.println(""Account locked due to too many failed attempts""); -            } else { -                System.out.println(""Incorrect password""); -            } -            return null; +    public static boolean isPasswordValid(User user; String password) { +        return user.getPassword().equals(password); +    } + +    public static void incrementLoginAttempts(User user; Map<String; Integer> loginAttempts) { +        loginAttempts.put(user.getUsername(); loginAttempts.getOrDefault(user.getUsername(); 0) + 1); +        if (loginAttempts.get(user.getUsername()) > 5) { +            System.out.println(""Account locked due to too many failed attempts""); +        } else { +            System.out.println(""Incorrect password"");          } +    }   +    public static void resetLoginAttempts(User user; Map<String; Integer> loginAttempts) {          loginAttempts.put(user.getUsername(); 0); -        user.setLastLogin(Instant.now().toEpochMilli()); -        System.out.println(user.getUsername() + "" logged in at "" + user.getLastLogin()); +    }   +    public static void logSuccessfulLogin(User user) { +        long now = Instant.now().toEpochMilli(); +        user.setLastLogin(now); +        System.out.println(user.getUsername() + "" logged in at "" + now); +    } + +    public static String generateToken(User user; String secret) {          String payload = ""{\""user_id\"":\"""" + user.getId() + ""\"";\""username\"":\"""" + user.getUsername() + ""\"";\""iat\"":"" + Instant.now().getEpochSecond() + ""}"";          return JwtUtils.sign(payload; secret);      } + +    public static String handleLogin(User user; String password; Map<String; Integer> loginAttempts; String secret) { +        if (!isPasswordValid(user; password)) { +            incrementLoginAttempts(user; loginAttempts); +            return null; +        } + +        resetLoginAttempts(user; loginAttempts); +        logSuccessfulLogin(user); +        return generateToken(user; secret); +    }  } ","java/refactor_original5.java: [REMOVED] Removed unnecessary if statement and removed unnecessary return statement."
"bug_fix_1","javascript","--- ./javascript/bug_fix_original1.js	2025-04-20 20:21:39 +++ ./javascript/bug_fix_changed1.js	2025-04-20 20:21:39 @@ -1;4 +1;7 @@  function divide(a; b) { +    if (b === 0) { +      throw new Error(""Cannot divide by zero""); +    }      return a / b;    }     \ No newline at end of file ","javascript/bug_fix_original1.js: ""Added error handling for division by zero"""
"bug_fix_2","javascript","--- ./javascript/bug_fix_original2.js	2025-04-20 20:21:39 +++ ./javascript/bug_fix_changed2.js	2025-04-20 20:21:39 @@ -1;3 +1;3 @@  function calculateTotal(cart) { -  return cart.reduce((total; item) => total + item.price); +  return cart.reduce((total; item) => total + (item.price || 0); 0);  } ","javascript/bug_fix_original2.js: ""Remove price calculation from cart reduce function and add a default value to it"""
"bug_fix_3","javascript","--- ./javascript/bug_fix_original3.js	2025-04-20 20:21:39 +++ ./javascript/bug_fix_changed3.js	2025-04-20 20:21:39 @@ -1;4 +1;12 @@  async function fetchUserData(userId) { -  const response = await fetch(`/api/user/${userId}`); -  return response.json(); +  try { +      const response = await fetch(`/api/user/${userId}`); +      if (!response.ok) { +          throw new Error(""Network response was not ok""); +      } +      return await response.json(); +  } catch (error) { +      console.error(""Failed to fetch user data:""; error); +      return null; +  }  } ","javascript/bug_fix_original3.js: ""Removed unnecessary fetch and replaced with try-catch for error handling"""
"bug_fix_4","javascript","--- ./javascript/bug_fix_original4.js	2025-04-21 23:10:27 +++ ./javascript/bug_fix_changed4.js	2025-04-21 23:10:27 @@ -9;6 +9;14 @@        getUserFullName(index) {          const user = this.users[index]; + +        if (!user.firstName && !user.lastName) { +            throw new Error(""User name information is missing""); +        } + +        if (!user.firstName) return user.lastName; +        if (!user.lastName) return user.firstName; +          return `${user.firstName} ${user.lastName}`;      }  } \ No newline at end of file @@ -18;4 +26;4 @@  manager.addUser(""Bob""; null);     console.log(manager.getUserFullName(0));  -console.log(manager.getUserFullName(1));  +console.log(manager.getUserFullName(1));  \ No newline at end of file ","javascript/bug_fix_original4.js: ""Added missing user name validation"""
"bug_fix_5","javascript","--- ./javascript/bug_fix_original5.js	2025-04-21 23:10:27 +++ ./javascript/bug_fix_changed5.js	2025-04-21 23:10:27 @@ -1;14 +1;23 @@  class StatsCalculator {      constructor(numbers) { +        if (!Array.isArray(numbers)) { +            throw new TypeError(""Input must be an array""); +        }          this.numbers = numbers;      }        getAverage() { -        const sum = this.numbers.reduce((a; b) => a + b); +        if (this.numbers.length === 0) { +            throw new Error(""Cannot calculate average of an empty array""); +        } +        const sum = this.numbers.reduce((a; b) => a + b; 0);          return sum / this.numbers.length;      }        getMedian() { +        if (this.numbers.length === 0) { +            throw new Error(""Cannot calculate median of an empty array""); +        }          const sorted = [...this.numbers].sort((a; b) => a - b);          const mid = Math.floor(sorted.length / 2);          if (sorted.length % 2 === 0) { @@ -25;5 +34;13 @@    const data2 = [];  const stats2 = new StatsCalculator(data2); -console.log(stats2.getAverage()); // Bug: reduce on empty array -console.log(stats2.getMedian());  // Bug: accessing undefined elements +try { +    console.log(stats2.getAverage()); +} catch (e) { +    console.error(e.message); +} +try { +    console.log(stats2.getMedian()); +} catch (e) { +    console.error(e.message); +} ","javascript/bug_fix_original5.js: ""Added checks for array input and error handling for empty arrays"""
"doc_update_1","javascript","--- ./javascript/doc_update_original1.js	2025-04-20 20:21:39 +++ ./javascript/doc_update_changed1.js	2025-04-20 20:21:39 @@ -1;3 +1;8 @@ +/** + * Greet the user by name. + * @param {string} name - The name of the user + * @returns {string} A greeting message + */  function greet(name) {      return `Hello; ${name}!`;    } \ No newline at end of file ","javascript/doc_update_original1.js: Added greeting function"
"doc_update_2","javascript","--- ./javascript/doc_update_original2.js	2025-04-20 20:21:39 +++ ./javascript/doc_update_changed2.js	2025-04-20 20:21:39 @@ -1;3 +1;9 @@ +/** + * Calculate the area of a circle. + *  + * @param {number} radius - The radius of the circle. + * @returns {number} The area. + */  function calculateArea(radius) {    return Math.PI * radius * radius;  } ","javascript/doc_update_original2.js: Added function to calculate the area of a circle."
"doc_update_3","javascript","--- ./javascript/doc_update_original3.js	2025-04-20 20:21:39 +++ ./javascript/doc_update_changed3.js	2025-04-20 20:21:39 @@ -1;3 +1;9 @@ +/** + * Encrypts a string using a basic Caesar cipher-like algorithm. + * @param {string} text - The text to encrypt. + * @param {number} key - The key (shift) for the encryption. + * @returns {string} The encrypted string. + */  function encrypt(text; key) {    return text.split('').map(char => String.fromCharCode(char.charCodeAt(0) + key)).join('');  } ","javascript/doc_update_original3.js: Added encryption function"
"feature_addition_1","javascript","--- ./javascript/feature_addition_original1.js	2025-04-20 20:21:39 +++ ./javascript/feature_addition_changed1.js	2025-04-20 20:21:39 @@ -1;3 +1;8 @@  function greet(name) { -  return `Hello; ${name}!`; -} +    return `Hello; ${name}!`; +  } +   +  function farewell(name) { +    return `Goodbye; ${name}!`; +  } +   ","javascript/feature_addition_original1.js: ""Added farewell function and removed return statement"""
"feature_addition_2","javascript","--- ./javascript/feature_addition_original2.js	2025-04-20 20:21:39 +++ ./javascript/feature_addition_changed2.js	2025-04-20 20:21:39 @@ -1;3 +1;7 @@  function getUserFullName(user) {    return `${user.firstName} ${user.lastName}`;  } + +function getUserInitials(user) { +  return `${user.firstName[0]}.${user.lastName[0]}.`; +} ","javascript/feature_addition_original2.js: Added function to get user initials"
"feature_addition_3","javascript","--- ./javascript/feature_addition_original3.js	2025-04-20 20:21:39 +++ ./javascript/feature_addition_changed3.js	2025-04-20 20:21:39 @@ -2;5 +2;11 @@    constructor(name) {        this.name = name;        this.completed = false; +      this.createdAt = new Date();    } + +  markComplete() { +      this.completed = true; +      this.completedAt = new Date(); +  }  } ","javascript/feature_addition_original3.js: ""Added createdAt and markComplete methods"""
"feature_addition_4","javascript","--- ./javascript/feature_addition_original4.js	2025-04-21 23:10:27 +++ ./javascript/feature_addition_changed4.js	2025-04-21 23:10:27 @@ -1;8 +1;16 @@  class Task { -    constructor(name) { +    constructor(name; priority = 'normal') {          this.name = name;          this.completed = false; +        this.createdAt = new Date(); +        this.priority = priority; +        this.completedAt = null;      } + +    markComplete() { +        this.completed = true; +        this.completedAt = new Date(); +    }  }    class TaskManager { @@ -10;12 +18;20 @@          this.tasks = [];      }   -    addTask(name) { -        const task = new Task(name); +    addTask(name; priority) { +        const task = new Task(name; priority);          this.tasks.push(task);      }        getAllTasks() {          return this.tasks;      } + +    getCompletedTasks() { +        return this.tasks.filter(task => task.completed); +    } + +    getTasksByPriority(priority) { +        return this.tasks.filter(task => task.priority === priority); +    }  } ","javascript/feature_addition_original4.js: [REMOVED] Removed constructor and added constructor with priority parameter."
"feature_addition_5","javascript","--- ./javascript/feature_addition_original5.js	2025-04-21 23:10:27 +++ ./javascript/feature_addition_changed5.js	2025-04-21 23:10:27 @@ -1;12 +1;23 @@  class Task { -    constructor(name) { +    constructor(name; estimatedHours = 0; deadline = null) {          this.name = name;          this.completed = false; +        this.estimatedHours = estimatedHours; +        this.deadline = deadline ? new Date(deadline) : null; +        this.completedAt = null;      }        markComplete() {          this.completed = true; +        this.completedAt = new Date();      } + +    isOverdue() { +        if (!this.completed && this.deadline) { +            return new Date() > this.deadline; +        } +        return false; +    }  }    class Project { @@ -15;13 +26;19 @@          this.tasks = [];      }   -    addTask(name) { -        this.tasks.push(new Task(name)); +    addTask(name; estimatedHours = 0; deadline = null) { +        this.tasks.push(new Task(name; estimatedHours; deadline));      }        getCompletedTasks() {          return this.tasks.filter(task => task.completed);      } + +    getProgress() { +        const total = this.tasks.length; +        const completed = this.getCompletedTasks().length; +        return total === 0 ? 0 : Math.round((completed / total) * 100); +    }  }    class ProjectManager { @@ -36;4 +53;10 @@      getAllProjects() {          return this.projects;      } + +    getOverallProgress() { +        const projectProgress = this.projects.map(p => p.getProgress()); +        if (projectProgress.length === 0) return 0; +        return Math.round(projectProgress.reduce((a; b) => a + b; 0) / projectProgress.length); +    }  } ","javascript/feature_addition_original5.js: [REMOVED] Removed constructor and added constructor with parameters."
"refactor_1","javascript","--- ./javascript/refactor_original1.js	2025-04-20 20:21:39 +++ ./javascript/refactor_changed1.js	2025-04-20 20:21:39 @@ -1;8 +1;4 @@  function isEven(num) { -    if (num % 2 === 0) { -      return true; -    } else { -      return false; -    } +    return num % 2 === 0;    }     \ No newline at end of file ","javascript/refactor_original1.js: ""Removed unnecessary conditional check and added return statement"""
"refactor_2","javascript","--- ./javascript/refactor_original2.js	2025-04-20 20:21:39 +++ ./javascript/refactor_changed2.js	2025-04-20 20:21:39 @@ -1;9 +1;8 @@ +const roleMap = { +  admin: 'Administrator'; +  user: 'Regular User' +}; +  function getUserRole(user) { -  if (user.role === 'admin') { -      return 'Administrator'; -  } else if (user.role === 'user') { -      return 'Regular User'; -  } else { -      return 'Unknown'; -  } +  return roleMap[user.role] || 'Unknown';  } ","javascript/refactor_original2.js: ""Added role mapping"""
"refactor_3","javascript","--- ./javascript/refactor_original3.js	2025-04-20 20:21:39 +++ ./javascript/refactor_changed3.js	2025-04-20 20:21:39 @@ -1;9 +1;21 @@ +function handlePendingOrder(order) { +  console.log(""Processing order...""); +  // do stuff +} + +function handleShippedOrder() { +  console.log(""Already shipped.""); +} +  function processOrder(order) { -  if (order.status === 'pending') { -      console.log(""Processing order...""); -      // do stuff +  switch(order.status) { +      case 'pending': +          handlePendingOrder(order); +          break; +      case 'shipped': +          handleShippedOrder(); +          break; +      default: +          console.log(""Unknown status."");    } -  if (order.status === 'shipped') { -      console.log(""Already shipped.""); -  }  } ","javascript/refactor_original3.js: ""Removed unnecessary console.log statements and added new ones for better logging"""
"refactor_4","javascript","--- ./javascript/refactor_original4.js	2025-04-21 23:10:27 +++ ./javascript/refactor_changed4.js	2025-04-21 23:10:27 @@ -1;12 +1;28 @@ -function reportUserActivity(user) { +function logLoginTime(user) {      console.log(`${user.name} logged in at ${user.loginTime}`); +} + +function logSessionDuration(user) {      const sessionLength = (user.logoutTime - user.loginTime) / 1000;      console.log(`Session duration: ${sessionLength} seconds`); +} + +function warnFailedAttempts(user) {      if (user.failedAttempts > 3) {          console.log(""User had multiple failed login attempts"");      } +} + +function warnPasswordExpiry(user) {      const passwordAge = (user.loginTime - user.passwordLastChanged) / (1000 * 60 * 60 * 24);      if (passwordAge > 90) {          console.log(""User password may be expired"");      }  } + +function reportUserActivity(user) { +    logLoginTime(user); +    logSessionDuration(user); +    warnFailedAttempts(user); +    warnPasswordExpiry(user); +} ","javascript/refactor_original4.js: ""Added new functions to log login time, session duration, warn failed attempts, and warn password expiry"""
"refactor_5","javascript","--- ./javascript/refactor_original5.js	2025-04-21 23:10:27 +++ ./javascript/refactor_changed5.js	2025-04-21 23:10:27 @@ -1;20 +1;28 @@  const jwt = require(""jsonwebtoken"");   -function handleLogin(user; password; loginAttempts; secret) { -    if (user.password !== password) { -        loginAttempts[user.username] = (loginAttempts[user.username] || 0) + 1; -        if (loginAttempts[user.username] > 5) { -            console.log(""Account locked due to too many failed attempts""); -        } else { -            console.log(""Incorrect password""); -        } -        return null; +function isPasswordValid(user; password) { +    return user.password === password; +} + +function incrementLoginAttempts(user; loginAttempts) { +    loginAttempts[user.username] = (loginAttempts[user.username] || 0) + 1; +    if (loginAttempts[user.username] > 5) { +        console.log(""Account locked due to too many failed attempts""); +    } else { +        console.log(""Incorrect password"");      } +}   +function resetLoginAttempts(user; loginAttempts) {      loginAttempts[user.username] = 0; +} + +function logSuccessfulLogin(user) {      user.lastLogin = Date.now();      console.log(`${user.username} logged in at ${user.lastLogin}`); +}   +function generateToken(user; secret) {      const payload = {          userId: user.id;          username: user.username; @@ -22;3 +30;14 @@      };      return jwt.sign(payload; secret);  } + +function handleLogin(user; password; loginAttempts; secret) { +    if (!isPasswordValid(user; password)) { +        incrementLoginAttempts(user; loginAttempts); +        return null; +    } + +    resetLoginAttempts(user; loginAttempts); +    logSuccessfulLogin(user); +    return generateToken(user; secret); +} ","javascript/refactor_original5.js: ""Added functions for password validation and login handling"""
"bug_fix_1","python","--- ./python/bug_fix_original1.py	2025-04-20 20:21:39 +++ ./python/bug_fix_changed1.py	2025-04-20 20:21:39 @@ -1;2 +1;4 @@ -def divide(a; b): -    return a / b +def average(numbers): +    if not numbers: +        return 0 +    return sum(numbers) / len(numbers) ","python/bug_fix_original1.py: ""Removed divide function and added average function"""
"bug_fix_2","python","--- ./python/bug_fix_original2.py	2025-04-20 20:21:39 +++ ./python/bug_fix_changed2.py	2025-04-20 20:21:39 @@ -1;2 +1;4 @@ -def average(numbers): -    return sum(numbers) / len(numbers) +def divide(a; b): +    if b == 0: +        raise ValueError(""Cannot divide by zero"") +    return a / b ","python/bug_fix_original2.py: ""Removed unnecessary function and added new function for division"""
"bug_fix_3","python","--- ./python/bug_fix_original3.py	2025-04-20 20:21:39 +++ ./python/bug_fix_changed3.py	2025-04-20 20:21:39 @@ -1;5 +1;10 @@  import requests    def get_weather(city): -    response = requests.get(f""http://api.weather.com/{city}"") -    return response.json() +    try: +        response = requests.get(f""http://api.weather.com/{city}"") +        response.raise_for_status() +        return response.json() +    except requests.RequestException as e: +        print(f""Error fetching weather data: {e}"") +        return None ","python/bug_fix_original3.py: Remove unnecessary requests.get() and replace with try-except block for error handling"
"bug_fix_4","python","--- ./python/bug_fix_original4.py	2025-04-21 23:10:27 +++ ./python/bug_fix_changed4.py	2025-04-21 23:10:27 @@ -3;7 +3;7 @@          self.first_name = first_name          self.last_name = last_name   -class UserManagerFixed: +class UserManagerOriginal:      def __init__(self):          self.users = []   @@ -12;20 +12;10 @@        def get_user_full_name(self; index):          user = self.users[index] - -        if not user.first_name and not user.last_name: -            raise ValueError(""User name information is missing"") - -        if not user.first_name: -            return user.last_name - -        if not user.last_name: -            return user.first_name -          return f""{user.first_name} {user.last_name}""    if __name__ == ""__main__"": -    manager = UserManagerFixed() +    manager = UserManagerOriginal()      manager.add_user(""Alice""; ""Johnson"")      manager.add_user(""Bob""; None)   ","python/bug_fix_original4.py: ""Fixed UserManager class, removed unnecessary checks and added missing checks"""
"bug_fix_5","python","--- ./python/bug_fix_original5.py	2025-04-21 23:10:27 +++ ./python/bug_fix_changed5.py	2025-04-21 23:10:27 @@ -1;12 +1;18 @@ -class StatsCalculatorOriginal: +class StatsCalculatorChanged:      def __init__(self; numbers): +        if numbers is None: +            raise ValueError(""Input must not be None"")          self.numbers = numbers        def get_average(self): +        if not self.numbers: +            raise ValueError(""Cannot calculate average of an empty list"")          total = sum(self.numbers)          return total / len(self.numbers)        def get_median(self): +        if not self.numbers: +            raise ValueError(""Cannot calculate median of an empty list"")          sorted_nums = sorted(self.numbers)          n = len(sorted_nums)          mid = n // 2 @@ -17;11 +23;18 @@    if __name__ == ""__main__"":      data1 = [10; 20; 30; 40] -    stats1 = StatsCalculatorOriginal(data1) +    stats1 = StatsCalculatorChanged(data1)      print(stats1.get_average())      print(stats1.get_median())        data2 = [] -    stats2 = StatsCalculatorOriginal(data2) -    print(stats2.get_average())  # Will raise ZeroDivisionError -    print(stats2.get_median())   # Will raise IndexError +    stats2 = StatsCalculatorChanged(data2) +    try: +        print(stats2.get_average()) +    except Exception as e: +        print(e) + +    try: +        print(stats2.get_median()) +    except Exception as e: +        print(e) ","python/bug_fix_original5.py: ""Added ValueError checks for None and empty list, removed print statements for ZeroDivisionError and IndexError"""
"doc_update_1","python","--- ./python/doc_update_original1.py	2025-04-20 20:21:39 +++ ./python/doc_update_changed1.py	2025-04-20 20:21:39 @@ -1;2 +1;11 @@  def greet(name): +    """""" +    Greet the user by name. + +    Parameters: +    name (str): The name of the user. + +    Returns: +    str: A greeting message. +    """"""      return f""Hello; {name}!"" ","python/doc_update_original1.py: ""Add greeting feature"""
"doc_update_2","python","--- ./python/doc_update_original2.py	2025-04-20 20:21:39 +++ ./python/doc_update_changed2.py	2025-04-20 20:21:39 @@ -1;2 +1;11 @@  def calculate_area(radius): +    """""" +    Calculate the area of a circle. + +    Parameters: +    radius (float): The radius of the circle. + +    Returns: +    float: The area of the circle. +    """"""      return 3.14159 * radius * radius ","python/doc_update_original2.py: ""Added function to calculate the area of a circle"""
"doc_update_3","python","--- ./python/doc_update_original3.py	2025-04-20 20:21:39 +++ ./python/doc_update_changed3.py	2025-04-20 20:21:39 @@ -1;2 +1;10 @@  def send_email(recipient; subject; body): +    """""" +    Sends a formatted email message. + +    Parameters: +        recipient (str): The recipient's email address. +        subject (str): The email subject line. +        body (str): The body content of the email. +    """"""      print(f""Sending email to {recipient} with subject {subject}"") ","python/doc_update_original3.py: ""Added email functionality"""
"feature_addition_1","python","--- ./python/feature_addition_original1.py	2025-04-20 20:21:39 +++ ./python/feature_addition_changed1.py	2025-04-20 20:21:39 @@ -1;2 +1;5 @@  def greet(name):      return f""Hello; {name}!"" + +def farewell(name): +    return f""Goodbye; {name}!"" ","python/feature_addition_original1.py: ""Added farewell function"""
"feature_addition_2","python","--- ./python/feature_addition_original2.py	2025-04-20 20:21:39 +++ ./python/feature_addition_changed2.py	2025-04-20 20:21:39 @@ -5;3 +5;6 @@        def full_name(self):          return f""{self.first} {self.last}"" +     +    def initials(self): +        return f""{self.first[0]}.{self.last[0]}."" ","python/feature_addition_original2.py: ""Added function to get initials"""
"feature_addition_3","python","--- ./python/feature_addition_original3.py	2025-04-20 20:21:39 +++ ./python/feature_addition_changed3.py	2025-04-20 20:21:39 @@ -1;4 +1;11 @@ +from datetime import datetime +  class Session:      def __init__(self; user_id):          self.user_id = user_id          self.active = True +        self.created_at = datetime.utcnow() + +    def end(self): +        self.active = False +        self.ended_at = datetime.utcnow() ","python/feature_addition_original3.py: ""Added end() and end_at attributes and methods"""
"feature_addition_4","python","--- ./python/feature_addition_original4.py	2025-04-21 23:10:27 +++ ./python/feature_addition_changed4.py	2025-04-21 23:10:27 @@ -0;0 +1;30 @@ +from datetime import datetime + +class Task: +    def __init__(self; name; priority=""normal""): +        self.name = name +        self.completed = False +        self.created_at = datetime.now() +        self.priority = priority +        self.completed_at = None + +    def mark_complete(self): +        self.completed = True +        self.completed_at = datetime.now() + +class TaskManager: +    def __init__(self): +        self.tasks = [] + +    def add_task(self; name; priority=""normal""): +        task = Task(name; priority) +        self.tasks.append(task) + +    def get_all_tasks(self): +        return self.tasks + +    def get_completed_tasks(self): +        return [task for task in self.tasks if task.completed] + +    def get_tasks_by_priority(self; priority): +        return [task for task in self.tasks if task.priority == priority] ","python/feature_addition_original4.py: ""Added Task and TaskManager classes"""
"feature_addition_5","python","--- ./python/feature_addition_original5.py	2025-04-21 23:10:27 +++ ./python/feature_addition_changed5.py	2025-04-21 23:10:27 @@ -1;22 +1;36 @@ +from datetime import datetime +  class Task: -    def __init__(self; name): +    def __init__(self; name; estimated_hours=0; deadline=None):          self.name = name          self.completed = False +        self.estimated_hours = estimated_hours +        self.deadline = datetime.strptime(deadline; ""%Y-%m-%d"") if deadline else None +        self.completed_at = None        def mark_complete(self):          self.completed = True +        self.completed_at = datetime.now()   +    def is_overdue(self): +        return self.deadline and not self.completed and datetime.now() > self.deadline +  class Project:      def __init__(self; title):          self.title = title          self.tasks = []   -    def add_task(self; name): -        self.tasks.append(Task(name)) +    def add_task(self; name; estimated_hours=0; deadline=None): +        self.tasks.append(Task(name; estimated_hours; deadline))        def get_completed_tasks(self):          return [task for task in self.tasks if task.completed]   +    def get_progress(self): +        total = len(self.tasks) +        completed = len(self.get_completed_tasks()) +        return round((completed / total) * 100) if total > 0 else 0 +  class ProjectManager:      def __init__(self):          self.projects = [] @@ -26;3 +40;8 @@        def get_all_projects(self):          return self.projects + +    def get_overall_progress(self): +        if not self.projects: +            return 0 +        return round(sum(p.get_progress() for p in self.projects) / len(self.projects)) ","python/feature_addition_original5.py: ""Added task and deadline functionality, removed unnecessary print statements"""
"refactor_1","python","--- ./python/refactor_original1.py	2025-04-20 20:21:39 +++ ./python/refactor_changed1.py	2025-04-20 20:21:39 @@ -1;5 +1;2 @@  def is_even(num): -    if num % 2 == 0: -        return True -    else: -        return False +    return num % 2 == 0 ","python/refactor_original1.py: ""Removed unnecessary conditional check and added return statement for better readability"""
"refactor_2","python","--- ./python/refactor_original2.py	2025-04-20 20:21:39 +++ ./python/refactor_changed2.py	2025-04-20 20:21:39 @@ -1;7 +1;5 @@  def get_role(role): -    if role == 'admin': -        return 'Administrator' -    elif role == 'user': -        return 'User' -    else: -        return 'Unknown' +    return { +        'admin': 'Administrator'; +        'user': 'User' +    }.get(role; 'Unknown') ","python/refactor_original2.py: [REMOVED] Removed role-based access control, [ADDED] Added role-based access control"
"refactor_3","python","--- ./python/refactor_original3.py	2025-04-20 20:21:39 +++ ./python/refactor_changed3.py	2025-04-20 20:21:39 @@ -1;4 +1;10 @@ -def report_user_activity(user): +def log_login(user):      print(f""{user.name} logged in at {user.login_time}"") + +def check_failed_attempts(user):      if user.failed_attempts > 3:          print(""User had multiple failed login attempts"") + +def report_user_activity(user): +    log_login(user) +    check_failed_attempts(user) ","python/refactor_original3.py: ""Added login and failed attempts tracking functions"""
"refactor_4","python","--- ./python/refactor_original4.py	2025-04-21 23:10:27 +++ ./python/refactor_changed4.py	2025-04-21 23:10:27 @@ -1;8 +1;20 @@ -def report_user_activity(user): +def log_login_time(user):      print(f""{user.name} logged in at {user.login_time}"") + +def log_session_duration(user):      session_length = (user.logout_time - user.login_time).seconds      print(f""Session duration: {session_length} seconds"") + +def warn_failed_attempts(user):      if user.failed_attempts > 3:          print(""User had multiple failed login attempts"") -    if (user.password_last_changed - user.login_time).days > 90: + +def warn_password_expiry(user): +    if (user.login_time - user.password_last_changed).days > 90:          print(""User password may be expired"") + +def report_user_activity(user): +    log_login_time(user) +    log_session_duration(user) +    warn_failed_attempts(user) +    warn_password_expiry(user) ","python/refactor_original4.py: ""Added login time, session duration, and failed attempts warning features. Also added log_session_duration function."""
"refactor_5","python","--- ./python/refactor_original5.py	2025-04-21 23:10:27 +++ ./python/refactor_changed5.py	2025-04-21 23:10:27 @@ -1;23 +1;36 @@  import time  import jwt   -def handle_login(user; password; login_attempts; secret): -    if user.password != password: -        login_attempts[user.username] = login_attempts.get(user.username; 0) + 1 -        if login_attempts[user.username] > 5: -            print(""Account locked due to too many failed attempts"") -        else: -            print(""Incorrect password"") -        return None +def is_password_valid(user; password): +    return user.password == password   +def increment_login_attempts(user; login_attempts): +    login_attempts[user.username] = login_attempts.get(user.username; 0) + 1 +    if login_attempts[user.username] > 5: +        print(""Account locked due to too many failed attempts"") +    else: +        print(""Incorrect password"") + +def reset_login_attempts(user; login_attempts):      login_attempts[user.username] = 0 + +def log_successful_login(user):      user.last_login = time.time()      print(f""{user.username} logged in at {user.last_login}"") -     + +def generate_token(user; secret):      payload = {          ""user_id"": user.id;          ""username"": user.username;          ""iat"": int(time.time())      } -    token = jwt.encode(payload; secret; algorithm=""HS256"") -    return token +    return jwt.encode(payload; secret; algorithm=""HS256"") + +def handle_login(user; password; login_attempts; secret): +    if not is_password_valid(user; password): +        increment_login_attempts(user; login_attempts) +        return None + +    reset_login_attempts(user; login_attempts) +    log_successful_login(user) +    return generate_token(user; secret) ","python/refactor_original5.py: ""Added functions for password validation, login attempts, and token generation"""
