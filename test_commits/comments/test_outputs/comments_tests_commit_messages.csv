test_name,test_type,diff,commit_message
"comments_1","with_comments","--- ./with_comments/comments_original1.js	2025-04-21 23:10:27 +++ ./with_comments/comments_changed1.js	2025-04-21 23:10:27 @@ -1;3 +1;6 @@  function greet(name) { -    return ""Hello; "" + name + ""!""; +    // Combine greeting message +    const greeting = ""Hello; "" + name + ""!""; +    // Return greeting in uppercase +    return greeting.toUpperCase();  } \ No newline at end of file ","with_comments/comments_original1.js: ""Added greeting message and made greeting uppercase"""
"comments_2","with_comments","--- ./with_comments/comments_original2.js	2025-04-21 23:10:27 +++ ./with_comments/comments_changed2.js	2025-04-21 23:10:27 @@ -1;3 +1;6 @@  function sumArray(arr) { +    // Check if input is an array +    if (!Array.isArray(arr)) return 0; +    // Use reduce to sum elements      return arr.reduce((a; b) => a + b; 0);  } \ No newline at end of file ","with_comments/comments_original2.js: ""Added check for input being an array and used reduce to sum elements"""
"comments_3","with_comments","--- ./with_comments/comments_original3.js	2025-04-21 23:10:27 +++ ./with_comments/comments_changed3.js	2025-04-21 23:10:27 @@ -1;3 +1;8 @@  function isEven(n) { +    // Ensure input is a number +    if (typeof n !== 'number') { +        throw new Error(""Input must be a number""); +    } +    // Check if even      return n % 2 === 0;  } \ No newline at end of file ","with_comments/comments_original3.js: ""Added input validation for number input"""
"comments_4","with_comments","--- ./with_comments/comments_original4.js	2025-04-21 23:10:27 +++ ./with_comments/comments_changed4.js	2025-04-21 23:10:27 @@ -1;3 +1;6 @@  function findMax(arr) { +    // Return null for empty arrays +    if (!arr.length) return null; +    // Use spread operator to find max      return Math.max(...arr);  } \ No newline at end of file ","with_comments/comments_original4.js: ""Use spread operator to find max"""
"comments_5","with_comments","--- ./with_comments/comments_original5.js	2025-04-21 23:10:27 +++ ./with_comments/comments_changed5.js	2025-04-21 23:10:27 @@ -1;3 +1;6 @@  function reverseString(str) { +    // Validate input +    if (typeof str !== 'string') return ''; +    // Split string into characters; reverse and join      return str.split('').reverse().join('');  } \ No newline at end of file ","with_comments/comments_original5.js: ""Validate input"""
"comments_6","with_comments","--- ./with_comments/comments_original6.js	2025-04-21 23:10:27 +++ ./with_comments/comments_changed6.js	2025-04-21 23:10:27 @@ -1;7 +1;17 @@  function calculateSum(arr) {      let sum = 0; +    let validCount = 0; +    // Loop through each item in the array      for (let i = 0; i < arr.length; i++) { -        sum += arr[i]; +        // Only sum if the item is a number +        if (typeof arr[i] === 'number') { +            sum += arr[i]; +            validCount++; // Count valid numbers +        }      } -    return sum; +    // Return both total and average +    return { +        total: sum; +        average: validCount > 0 ? sum / validCount : 0 +    };  } ","with_comments/comments_original6.js: ""Added functionality to calculate total and average of valid numbers"""
"comments_7","with_comments","--- ./with_comments/comments_original7.js	2025-04-21 23:10:27 +++ ./with_comments/comments_changed7.js	2025-04-21 23:10:27 @@ -1;7 +1;16 @@ -function calculateTotal(items) { +function calculateTotal(items; applyDiscount = false) {      let total = 0; + +    // Sum up all item prices      for (let item of items) {          total += item.price;      } -    return total; + +    // Apply a 10% discount if requested +    if (applyDiscount) { +        total *= 0.9; +    } + +    // Round to two decimal places +    return Math.round(total * 100) / 100;  } ","with_comments/comments_original7.js: [REMOVED] Removed unnecessary return statement."
"comments_8","with_comments","--- ./with_comments/comments_original8.js	2025-04-21 23:10:27 +++ ./with_comments/comments_changed8.js	2025-04-21 23:10:27 @@ -1;5 +1;39 @@  let tasks = [];   -function addTask(name) { -    tasks.push({ name; completed: false }); +// Simulate a database save with a timeout +function saveToDatabase(task) { +    return new Promise((resolve) => { +        setTimeout(() => resolve(true); 100); +    });  } + +// Validates a task name +function isValidTaskName(name) { +    return typeof name === 'string' && name.trim().length > 0; +} + +// Adds a task with validation and async ""save"" +async function addTask(name; priority = ""normal"") { +    // Validate task name +    if (!isValidTaskName(name)) { +        throw new Error(""Invalid task name.""); +    } + +    const task = { +        name: name.trim(); +        completed: false; +        priority; +        createdAt: new Date().toISOString() +    }; + +    tasks.push(task); + +    // Simulate saving to a database +    const success = await saveToDatabase(task); + +    if (!success) { +        throw new Error(""Failed to save task.""); +    } + +    return task; +} ","with_comments/comments_original8.js: ""Removed unnecessary function addTask(name) and added new functions addTask(name, priority) and saveToDatabase()"""
"comments_9","with_comments","--- ./with_comments/comments_original9.js	2025-04-21 23:10:27 +++ ./with_comments/comments_changed9.js	2025-04-21 23:10:27 @@ -1;12 +1;69 @@ -class TaskManager { +class Task { +    constructor(name; priority = ""normal""; deadline = null) { +        this.name = name.trim(); +        this.priority = priority; +        this.deadline = deadline; +        this.completed = false; +        this.createdAt = new Date().toISOString(); +    } + +    isOverdue() { +        if (!this.deadline) return false; +        return new Date() > new Date(this.deadline); +    } +} + +// Simulates a database layer +class TaskRepository {      constructor() { -        this.tasks = []; +        this.storage = [];      }   -    addTask(name) { -        this.tasks.push({ name; completed: false }); +    async save(task) { +        // Simulate async delay +        return new Promise((resolve) => { +            setTimeout(() => { +                this.storage.push(task); +                resolve(true); +            }; 100); +        });      } + +    getAll() { +        return this.storage; +    }  }   -const manager = new TaskManager(); -manager.addTask(""Finish report""); +// Manages task creation and validation +class TaskManager { +    constructor(repository) { +        this.repository = repository; +    } + +    validateName(name) { +        return typeof name === 'string' && name.trim().length > 0; +    } + +    async addTask(name; priority = ""normal""; deadline = null) { +        if (!this.validateName(name)) { +            throw new Error(""Task name is invalid.""); +        } + +        const task = new Task(name; priority; deadline); +        const success = await this.repository.save(task); + +        if (!success) { +            throw new Error(""Failed to save task.""); +        } + +        return task; +    } +} + +// Usage +(async () => { +    const repo = new TaskRepository(); +    const manager = new TaskManager(repo); + +    await manager.addTask(""Write tests""; ""high""; ""2025-05-01""); +})(); ","with_comments/comments_original9.js: ""Added TaskManager and Task classes, removed TaskRepository class, added TaskManager constructor, added TaskManager validateName method, added TaskManager addTask method,"
"comments_1","without_comments","--- ./without_comments/comments_original1.js	2025-04-21 23:10:27 +++ ./without_comments/comments_changed1.js	2025-04-21 23:10:27 @@ -1;3 +1;4 @@  function greet(name) { -    return ""Hello; "" + name + ""!""; +    const greeting = ""Hello; "" + name + ""!""; +    return greeting.toUpperCase();  } \ No newline at end of file ","without_comments/comments_original1.js: ""Fixes a bug in the greeting function"""
"comments_2","without_comments","--- ./without_comments/comments_original2.js	2025-04-21 23:10:27 +++ ./without_comments/comments_changed2.js	2025-04-21 23:10:27 @@ -1;3 +1;4 @@  function sumArray(arr) { +    if (!Array.isArray(arr)) return 0;      return arr.reduce((a; b) => a + b; 0);  } \ No newline at end of file ","without_comments/comments_original2.js: ""Added check for array input"""
"comments_3","without_comments","--- ./without_comments/comments_original3.js	2025-04-21 23:10:27 +++ ./without_comments/comments_changed3.js	2025-04-21 23:10:27 @@ -1;3 +1;6 @@  function isEven(n) { +    if (typeof n !== 'number') { +        throw new Error(""Input must be a number""); +    }      return n % 2 === 0;  } \ No newline at end of file ","without_comments/comments_original3.js: Added input validation for number input"
"comments_4","without_comments","--- ./without_comments/comments_original4.js	2025-04-21 23:10:27 +++ ./without_comments/comments_changed4.js	2025-04-21 23:10:27 @@ -1;3 +1;4 @@  function findMax(arr) { +    if (!arr.length) return null;      return Math.max(...arr);  } \ No newline at end of file ","without_comments/comments_original4.js: """
"comments_5","without_comments","--- ./without_comments/comments_original5.js	2025-04-21 23:10:27 +++ ./without_comments/comments_changed5.js	2025-04-21 23:10:27 @@ -1;3 +1;4 @@  function reverseString(str) { +    if (typeof str !== 'string') return '';      return str.split('').reverse().join('');  } \ No newline at end of file ","without_comments/comments_original5.js: """
"comments_6","without_comments","--- ./without_comments/comments_original6.js	2025-04-21 23:10:27 +++ ./without_comments/comments_changed6.js	2025-04-21 23:10:27 @@ -1;7 +1;14 @@  function calculateSum(arr) {      let sum = 0; +    let validCount = 0;      for (let i = 0; i < arr.length; i++) { -        sum += arr[i]; +        if (typeof arr[i] === 'number') { +            sum += arr[i]; +            validCount++; +        }      } -    return sum; +    return { +        total: sum; +        average: validCount > 0 ? sum / validCount : 0 +    };  } ","without_comments/comments_original6.js: ""Remove unnecessary type checking and unnecessary variable declaration"""
"comments_7","without_comments","--- ./without_comments/comments_original7.js	2025-04-21 23:10:27 +++ ./without_comments/comments_changed7.js	2025-04-21 23:10:27 @@ -1;7 +1;10 @@ -function calculateTotal(items) { +function calculateTotal(items; applyDiscount = false) {      let total = 0;      for (let item of items) {          total += item.price;      } -    return total; +    if (applyDiscount) { +        total *= 0.9; +    } +    return Math.round(total * 100) / 100;  } ","without_comments/comments_original7.js: ""Added function to calculate total with discount"""
"comments_8","without_comments","--- ./without_comments/comments_original8.js	2025-04-21 23:10:27 +++ ./without_comments/comments_changed8.js	2025-04-21 23:10:27 @@ -1;5 +1;34 @@  let tasks = [];   -function addTask(name) { -    tasks.push({ name; completed: false }); +function saveToDatabase(task) { +    return new Promise((resolve) => { +        setTimeout(() => resolve(true); 100); +    });  } + +function isValidTaskName(name) { +    return typeof name === 'string' && name.trim().length > 0; +} + +async function addTask(name; priority = ""normal"") { +    if (!isValidTaskName(name)) { +        throw new Error(""Invalid task name.""); +    } + +    const task = { +        name: name.trim(); +        completed: false; +        priority; +        createdAt: new Date().toISOString() +    }; + +    tasks.push(task); + +    const success = await saveToDatabase(task); + +    if (!success) { +        throw new Error(""Failed to save task.""); +    } + +    return task; +} ","without_comments/comments_original8.js: ""Added asynchronous function for adding tasks and a function to validate task names"""
"comments_9","without_comments","--- ./without_comments/comments_original9.js	2025-04-21 23:10:27 +++ ./without_comments/comments_changed9.js	2025-04-21 23:10:27 @@ -1;12 +1;65 @@ -class TaskManager { +class Task { +    constructor(name; priority = ""normal""; deadline = null) { +        this.name = name.trim(); +        this.priority = priority; +        this.deadline = deadline; +        this.completed = false; +        this.createdAt = new Date().toISOString(); +    } + +    isOverdue() { +        if (!this.deadline) return false; +        return new Date() > new Date(this.deadline); +    } +} + +class TaskRepository {      constructor() { -        this.tasks = []; +        this.storage = [];      }   -    addTask(name) { -        this.tasks.push({ name; completed: false }); +    async save(task) { +        return new Promise((resolve) => { +            setTimeout(() => { +                this.storage.push(task); +                resolve(true); +            }; 100); +        });      } + +    getAll() { +        return this.storage; +    }  }   -const manager = new TaskManager(); -manager.addTask(""Finish report""); +class TaskManager { +    constructor(repository) { +        this.repository = repository; +    } + +    validateName(name) { +        return typeof name === 'string' && name.trim().length > 0; +    } + +    async addTask(name; priority = ""normal""; deadline = null) { +        if (!this.validateName(name)) { +            throw new Error(""Task name is invalid.""); +        } + +        const task = new Task(name; priority; deadline); +        const success = await this.repository.save(task); + +        if (!success) { +            throw new Error(""Failed to save task.""); +        } + +        return task; +    } +} + +(async () => { +    const repo = new TaskRepository(); +    const manager = new TaskManager(repo); + +    await manager.addTask(""Write tests""; ""high""; ""2025-05-01""); +})(); ","without_comments/comments_original9.js: ""Added TaskManager and Task classes, removed TaskRepository class, added TaskManager constructor, added TaskManager validateName method, added TaskManager addTask method,"
